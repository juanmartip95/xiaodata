{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:16:58.387908Z\",\"iopub.execute_input\":\"2023-09-08T19:16:58.388243Z\",\"iopub.status.idle\":\"2023-09-08T19:16:58.395290Z\",\"shell.execute_reply.started\":\"2023-09-08T19:16:58.388210Z\",\"shell.execute_reply\":\"2023-09-08T19:16:58.394185Z\"}}\nimport pandas as pd\nimport numpy as np\npd.plotting.register_matplotlib_converters()\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nprint(\"Setup Complete\")\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:16:58.399470Z\",\"iopub.execute_input\":\"2023-09-08T19:16:58.399717Z\",\"iopub.status.idle\":\"2023-09-08T19:16:58.438750Z\",\"shell.execute_reply.started\":\"2023-09-08T19:16:58.399696Z\",\"shell.execute_reply\":\"2023-09-08T19:16:58.437466Z\"}}\n# Path of the file to read\nxiao_filepath = \"/kaggle/input/dataxiao/Qa raw data.csv\"\n\n# Read the file into a variable fifa_data\nxiao_data = pd.read_csv(xiao_filepath, delimiter=\";\")\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:16:58.440442Z\",\"iopub.execute_input\":\"2023-09-08T19:16:58.440759Z\",\"iopub.status.idle\":\"2023-09-08T19:16:58.460296Z\",\"shell.execute_reply.started\":\"2023-09-08T19:16:58.440736Z\",\"shell.execute_reply\":\"2023-09-08T19:16:58.458857Z\"}}\nprint(xiao_data)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:16:58.462385Z\",\"iopub.execute_input\":\"2023-09-08T19:16:58.462856Z\",\"iopub.status.idle\":\"2023-09-08T19:17:06.930294Z\",\"shell.execute_reply.started\":\"2023-09-08T19:16:58.462832Z\",\"shell.execute_reply\":\"2023-09-08T19:17:06.929546Z\"}}\ncolumn_name = input(\"Enter column name: \")\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:06.931997Z\",\"iopub.execute_input\":\"2023-09-08T19:17:06.932927Z\",\"iopub.status.idle\":\"2023-09-08T19:17:07.440978Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:06.932900Z\",\"shell.execute_reply\":\"2023-09-08T19:17:07.440352Z\"}}\nsns.scatterplot(x=xiao_data[\"Time (s)\"], y=xiao_data[column_name])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:07.441828Z\",\"iopub.execute_input\":\"2023-09-08T19:17:07.443014Z\",\"iopub.status.idle\":\"2023-09-08T19:17:07.477659Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:07.442989Z\",\"shell.execute_reply\":\"2023-09-08T19:17:07.476833Z\"}}\n# Get all the column names\ncolumn_names = xiao_data.columns\ncolumns_to_convert = column_names.tolist()\n\nfor column in columns_to_convert:\n    if xiao_data[column].dtype == 'object':\n        xiao_data[column] = pd.to_numeric(xiao_data[column].str.replace(',', '.'), errors='coerce')\n\n\n\nprint(xiao_data.dtypes)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:07.478857Z\",\"iopub.execute_input\":\"2023-09-08T19:17:07.479716Z\",\"iopub.status.idle\":\"2023-09-08T19:17:07.522299Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:07.479691Z\",\"shell.execute_reply\":\"2023-09-08T19:17:07.521125Z\"}}\n# create list of column names containing \".2\"\ncolumn_names = [col for col in xiao_data.columns if \".2\" in col]\n\n# loop through column names and create new columns with averaged values\nfor name in column_names:\n    # get index of current column\n    idx = xiao_data.columns.get_loc(name)\n    \n    # get indices of preceding and following columns\n    prev_idx = idx - 1\n    prev_prev_idx = idx -2\n    \n    # create new column name\n    new_col_name = name.replace(\".2\", \"\") + \"_avg\"\n    \n    # compute average of current column and its neighbors\n    new_col_data = xiao_data.iloc[:, [prev_idx, idx, prev_prev_idx]].select_dtypes(include=np.number).mean(axis=1)\n    \n    # add new column to dataframe\n    xiao_data[new_col_name] = new_col_data\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:07.523659Z\",\"iopub.execute_input\":\"2023-09-08T19:17:07.524202Z\",\"iopub.status.idle\":\"2023-09-08T19:17:07.533802Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:07.524176Z\",\"shell.execute_reply\":\"2023-09-08T19:17:07.532847Z\"}}\nxiao_data.columns\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:07.535089Z\",\"iopub.execute_input\":\"2023-09-08T19:17:07.535416Z\",\"iopub.status.idle\":\"2023-09-08T19:17:07.567195Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:07.535386Z\",\"shell.execute_reply\":\"2023-09-08T19:17:07.566244Z\"}}\nprint(xiao_data)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:07.568557Z\",\"iopub.execute_input\":\"2023-09-08T19:17:07.569046Z\",\"iopub.status.idle\":\"2023-09-08T19:17:16.400458Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:07.569013Z\",\"shell.execute_reply\":\"2023-09-08T19:17:16.399321Z\"}}\nnew_column_name = input(\"(you can choose _avg now)Enter column name: \")\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:16.404074Z\",\"iopub.execute_input\":\"2023-09-08T19:17:16.404376Z\",\"iopub.status.idle\":\"2023-09-08T19:17:16.409923Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:16.404351Z\",\"shell.execute_reply\":\"2023-09-08T19:17:16.408458Z\"}}\nxiao_data.iloc[:, 0] = xiao_data.iloc[:, 0].astype(float)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:16.411470Z\",\"iopub.execute_input\":\"2023-09-08T19:17:16.411770Z\",\"iopub.status.idle\":\"2023-09-08T19:17:16.448338Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:16.411743Z\",\"shell.execute_reply\":\"2023-09-08T19:17:16.447195Z\"}}\nxiao_data.head()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:16.449649Z\",\"iopub.execute_input\":\"2023-09-08T19:17:16.450416Z\",\"iopub.status.idle\":\"2023-09-08T19:17:16.914188Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:16.450378Z\",\"shell.execute_reply\":\"2023-09-08T19:17:16.912876Z\"}}\ndef get_mutant_index(df, col_name):\n    # Get the column index for the specified column name\n    col_index = df.columns.get_loc(col_name)\n    \n    \n    \n    return col_index\nmutant_index_0 = get_mutant_index(xiao_data, column_name)\nmutant_index_1=get_mutant_index(xiao_data,new_column_name)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0], data=xiao_data)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0 + 1], data=xiao_data)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0 + 2], data=xiao_data)\n\n#sns.regplot(x='Time', y='xw11adcmu', data=xiao_data)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:16.915583Z\",\"iopub.execute_input\":\"2023-09-08T19:17:16.915917Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.185808Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:16.915888Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.184237Z\"}}\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0], data=xiao_data)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0 + 1], data=xiao_data)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_0 + 2], data=xiao_data)\nsns.scatterplot(x='Time (s)', y=xiao_data.columns[mutant_index_1], data=xiao_data)\n#sns.regplot(x='Time', y='xw11adcmu', data=xiao_data)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.188552Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.189463Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.271454Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.189431Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.270027Z\"}}\naverages = []\nmax_values = {}\nmin_values = {}\n\nfor column in xiao_data.columns:\n    # Extract the first 4 values from the column as a string\n    first_four = xiao_data[column].astype(str).str[:4]\n    all_but_four = xiao_data[column].astype(str).str[4:]\n    min_but_4 = pd.to_numeric(all_but_four, errors='coerce').min()\n\n    # Calculate the max value and min value in the column\n    max_value = xiao_data[column].max()\n    min_value = xiao_data[column].min()\n\n    # Save the max and min values in the dictionaries\n    max_values[column] = max_value\n    min_values[column] = min_value\n\n    # Convert the first four values to numeric and calculate the mean\n    mean_of_four = pd.to_numeric(first_four, errors='coerce').mean()\n\n    # Append the mean to the list of averages\n    averages.append(mean_of_four)\n\n# Create a string with the averages, max values, and min values for each column\noutput_list = [f\"{col}: avg={avg:.2f}, max={max_values[col]}, min={min_values[col]}\" for col, avg in zip(xiao_data.columns, averages)]\noutput_string = \", \".join(output_list)\n\n# Print the output string\nprint(output_string)\n\n# Create dictionaries with the averages and the min values of the first 4 values for each column\naverages_dict = {col: avg for col, avg in zip(xiao_data.columns, averages)}\nmin_values_dict = {col: min_val for col, min_val in zip(xiao_data.columns, min_values)}\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.275152Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.275518Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.330835Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.275491Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.329470Z\"}}\nmin_values_dict = {column: float(min(xiao_data[column])) for column in xiao_data.columns[1:]}\nmax_values_dict = {column: float(max(xiao_data[column])) for column in xiao_data.columns[1:]}\n\n# Subtract the minimum of each column\nxiao_data_norm = xiao_data.copy()\nxiao_data_norm[xiao_data.columns[1:]] = xiao_data[xiao_data.columns[1:]].subtract({k: v for k, v in min_values_dict.items()})\n\n# Divide each column by its maximum-minimum\nxiao_data_norm[xiao_data.columns[1:]] = xiao_data_norm[xiao_data.columns[1:]].divide({k: max_values_dict[k]-min_values_dict[k] for k in max_values_dict})\n\n# Print the normalized data\nprint(xiao_data_norm)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.332585Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.333003Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.348160Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.332975Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.346893Z\"}}\n# Save the normalized data to a new CSV file in /kaggle/working/\nxiao_data_norm.to_csv('/kaggle/working/normalized_data.csv', index=False)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.349278Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.349543Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.366394Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.349520Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.365668Z\"}}\nprint(xiao_data_norm[new_column_name])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.367485Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.368086Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.803032Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.368049Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.801940Z\"}}\n# Create the scatterplot with normalized y-axis values\nsns.scatterplot(x=xiao_data[\"Time (s)\"].iloc[4:], y=xiao_data_norm[new_column_name].iloc[4:])\n\n# Set the x-axis scale to logarithmic\nplt.xscale(\"log\")\n\n# Show the plot\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.804509Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.804864Z\",\"iopub.status.idle\":\"2023-09-08T19:17:17.815479Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.804835Z\",\"shell.execute_reply\":\"2023-09-08T19:17:17.814302Z\"}}\ndef get_time_and_index_for_mutant(mutant_col):\n    # Subset the data to only the specified mutant column and time\n    mutant_df = xiao_data_norm[[mutant_col, \"Time (s)\"]]\n    \n    # Find the index where the mutant achieves y=1\n    index_of_interest = (mutant_df[mutant_col] == 1).idxmax()\n    \n    # Get the corresponding time value and index\n    time_of_interest = xiao_data_norm.loc[index_of_interest, \"Time (s)\"]\n    \n    return time_of_interest, index_of_interest\ndef get_mutant_index(df, col_name):\n    # Get the column index for the specified column name\n    col_index = df.columns.get_loc(col_name)\n    \n    \n    \n    return col_index\nmutant_index = get_mutant_index(xiao_data_norm, new_column_name)\n\ntime_for_mutant, index_for_mutant = get_time_and_index_for_mutant(new_column_name)\nprint(mutant_index)\nprint(time_for_mutant)\nprint(index_for_mutant)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:17.816897Z\",\"iopub.execute_input\":\"2023-09-08T19:17:17.817241Z\",\"iopub.status.idle\":\"2023-09-08T19:17:18.245822Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:17.817215Z\",\"shell.execute_reply\":\"2023-09-08T19:17:18.244839Z\"}}\n# Create the scatterplot\nsns.scatterplot(x=xiao_data_norm[\"Time (s)\"].iloc[index_for_mutant:], y=xiao_data_norm[new_column_name].iloc[4:])\n\n# Set the x-axis scale to logarithmic\nplt.xscale(\"log\")\n\n# Show the plot\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:18.247244Z\",\"iopub.execute_input\":\"2023-09-08T19:17:18.247525Z\",\"iopub.status.idle\":\"2023-09-08T19:17:19.389434Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:18.247501Z\",\"shell.execute_reply\":\"2023-09-08T19:17:19.387864Z\"}}\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n\n# Define the 3-parameter exponential decay function\ndef exponential_decay(x, A1, A2, A3, K1, K2, K3):\n    return A1 * np.exp(-K1 * (x - time_for_mutant)) + A2 * np.exp(-K2 * (x - time_for_mutant)) + A3 * np.exp(-K3 * (x - time_for_mutant))\n\n# Set the initial guess values for the parameters and the maximum number of function calls\np0 = [0.3, 0.3, 0.3, 0.1, 1, 10]\nmaxfev = 100000\n\n# Get the data\nx = xiao_data_norm[\"Time (s)\"].iloc[index_for_mutant:]\ny = xiao_data_norm[new_column_name].iloc[index_for_mutant:]\n\n# Fit the exponential decay function to the data\npopt, pcov = curve_fit(exponential_decay, x, y, p0=p0, maxfev=maxfev)\n\n# Calculate R^2\nresiduals = y - exponential_decay(x, *popt)\nss_res = np.sum(residuals**2)\nss_tot = np.sum((y - np.mean(y))**2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Print the estimated parameters and R^2\nprint(\"A1= {:.3f}, A2= {:.3f}, A3= {:.3f}, K1= {:.3f}, K2= {:.3f}, K3= {:.3f}, R^2= {:.3f}\".format(*popt, r_squared))\n\nfrom prettytable import PrettyTable\n\nhalf_life1 = np.log2(2)/popt[3]\nhalf_life2 = np.log2(2)/popt[4]\nhalf_life3 = np.log2(2)/popt[5]\nval_at_half_life1 = exponential_decay(half_life1, *popt)\nval_at_half_life2 = exponential_decay(half_life2, *popt)\nval_at_half_life3 = exponential_decay(half_life3, *popt)\n\ntable = PrettyTable()\ntable.field_names = [\"Half-life\", \"Exponential Value at Half-life\"]\n\ntable.add_row([f\"Half-life 3 ({half_life1:.6f}) associated to K1 and A1\", f\"{val_at_half_life1:.6f}\" + ('*' if val_at_half_life1 < 0 else '')])\ntable.add_row([f\"Half-life 2 ({half_life2:.6f}) associated to K2 and A2\", f\"{val_at_half_life2:.6f}\" + ('*' if val_at_half_life2 < 0 else '')])\ntable.add_row([f\"Half-life 1 ({half_life3:.6f}) associated to K3 and A3\", f\"{val_at_half_life3:.6f}\" + ('*' if val_at_half_life3 < 0 else '')])\n\nprint(table)\n\n\n\n# Create a new time vector starting from the end of the actual data\nx_pred = np.linspace(x.iloc[-1], 100, 1000)\n\n# Predict the values for the new time vector\ny_pred = exponential_decay(x_pred, *popt)\n\n# Create a DataFrame with the predicted values\npred_df = pd.DataFrame({'Time (s)': x_pred, new_column_name: y_pred})\n\n# Plot the data and the fitted curve\nfig, ax = plt.subplots()\nax.plot(x, y, 'bo', label='data')\nax.plot(x, exponential_decay(x, *popt), 'r-', label='fit')\nplt.xscale(\"log\")\n# Set the y-axis limits to focus on the range where the half-life occurs\nax.set_ylim(bottom=-0.1, top=3.6)\n\n# Add vertical lines for the half-life values\nax.axvline(x=half_life3, linestyle='--', color='gray')\nax.axvline(x=half_life2, linestyle='--', color='gray')\nax.axvline(x=half_life1, linestyle='--', color='gray')\n# Plot the predicted values with a different color\nax.plot(pred_df['Time (s)'], pred_df[new_column_name], color='green', linestyle='-')\n# Define the x range for the plots\nx_pre = np.linspace(x.iloc[-1], 100, 1000)\ny_pre = exponential_decay(x_pre, *popt)\n\n# Define the individual components of the function\ndef component1(x):\n    return popt[0] * np.exp(-popt[3] * (x - time_for_mutant))\ndef component2(x):\n    return popt[1] * np.exp(-popt[4] * (x - time_for_mutant))\ndef component3(x):\n    return popt[2] * np.exp(-popt[5] * (x - time_for_mutant))\n\n# Plot the individual components of the function\nfig, (ax1) = plt.subplots()\nax1.plot(x, exponential_decay(x, *popt), 'r-', label='fit')\n#ax1.plot(x_pred, y_pred, 'r-', label='fit')\nax1.plot(pred_df['Time (s)'], pred_df[new_column_name], color='green', linestyle='-')\nax1.fill_between(x, component2(x)+component1(x),exponential_decay(x, *popt), where=(x >=0) & (x <= 100), alpha=0.5, color='red', label='A3')\nax1.plot(x, component2(x)+component1(x), 'orange', label='A1exp+A2exp')\nax1.fill_between(x, component1(x),component2(x)+component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='orange', label='A2')\nax1.plot(x, component1(x), 'yellow', label='A1exp')\nax1.fill_between(x, 0,component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='yellow', label='A1')\nax1.set_xlabel('Time (s)')\nax1.set_ylabel('Exponential Decay')\nplt.xscale(\"log\")\nax1.legend()\n\n# Add vertical lines for the half-life values\nax1.axvline(x=half_life3, linestyle='--', color='gray')\nax1.axvline(x=half_life2, linestyle='--', color='gray')\nax1.axvline(x=half_life1, linestyle='--', color='gray')\n\n# Add a legend to the plot\nax1.legend()\n\n\nplt.show()\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:19.390404Z\",\"iopub.execute_input\":\"2023-09-08T19:17:19.390629Z\",\"iopub.status.idle\":\"2023-09-08T19:17:20.664036Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:19.390607Z\",\"shell.execute_reply\":\"2023-09-08T19:17:20.662998Z\"}}\nimport numpy as np\nimport pandas as pd\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n\n# Define the 3-parameter exponential decay function\ndef exponentialhyp_decay(x, A1, A2, A3, K1, K2, K3):\n    return A1 * np.exp(-K1 * (x - time_for_mutant)) + A2 * np.exp(-K2 * (x - time_for_mutant)) + A3 * abs(1 / (1 + K3 * (x - time_for_mutant)))\n\n# Set the initial guess values for the parameters and the maximum number of function calls\np0 = [0.189,  0.256, 0.552, 0.638, 193.822, 2451.471]\nmaxfev = 10000\n\n# Get the data\nx = xiao_data_norm[\"Time (s)\"].iloc[index_for_mutant:]\ny = xiao_data_norm[new_column_name].iloc[index_for_mutant:]\n\n# Fit the exponential decay function to the data\npopt, pcov = curve_fit(exponential_decay, x, y, p0=p0, maxfev=maxfev)\n\n# Calculate R^2\nresiduals = y - exponential_decay(x, *popt)\nss_res = np.sum(residuals**2)\nss_tot = np.sum((y - np.mean(y))**2)\nr_squared = 1 - (ss_res / ss_tot)\n\n# Print the estimated parameters and R^2\nprint(\"A1= {:.3f}, A2= {:.3f}, A3= {:.3f}, K1= {:.3f}, K2= {:.3f}, K3= {:.3f}, R^2= {:.3f}\".format(*popt, r_squared))\n\nfrom prettytable import PrettyTable\n\nhalf_life1 = np.log2(2)/popt[3]\nhalf_life2 = np.log2(2)/popt[4]\nhalf_life3 = np.log2(2)/popt[5]\nval_at_half_life1 = exponential_decay(half_life1, *popt)\nval_at_half_life2 = exponential_decay(half_life2, *popt)\nval_at_half_life3 = exponential_decay(half_life3, *popt)\n\ntable = PrettyTable()\ntable.field_names = [\"Half-life\", \"Exponential Value at Half-life\"]\n\ntable.add_row([f\"Half-life 3 ({half_life1:.6f}) associated to K1 and A1\", f\"{val_at_half_life1:.6f}\" + ('*' if val_at_half_life1 < 0 else '')])\ntable.add_row([f\"Half-life 2 ({half_life2:.6f}) associated to K2 and A2\", f\"{val_at_half_life2:.6f}\" + ('*' if val_at_half_life2 < 0 else '')])\ntable.add_row([f\"Half-life 1 ({half_life3:.6f}) associated to K3 and A3\", f\"{val_at_half_life3:.6f}\" + ('*' if val_at_half_life3 < 0 else '')])\n\nprint(table)\n\n\n\n# Create a new time vector starting from the end of the actual data\nx_pred = np.linspace(x.iloc[-1], 100, 1000)\n\n# Predict the values for the new time vector\ny_pred = exponentialhyp_decay(x_pred, *popt)\n\n# Create a DataFrame with the predicted values\npred_df = pd.DataFrame({'Time (s)': x_pred, new_column_name: y_pred})\n\n# Plot the data and the fitted curve\nfig, ax = plt.subplots()\nax.plot(x, y, 'bo', label='data')\nax.plot(x, exponentialhyp_decay(x, *popt), 'r-', label='fit')\nplt.xscale(\"log\")\n# Set the y-axis limits to focus on the range where the half-life occurs\nax.set_ylim(bottom=-0.1, top=1.1)\n\n# Add vertical lines for the half-life values\nax.axvline(x=half_life3, linestyle='--', color='gray')\nax.axvline(x=half_life2, linestyle='--', color='gray')\nax.axvline(x=half_life1, linestyle='--', color='gray')\n# Plot the predicted values with a different color\nax.plot(pred_df['Time (s)'], pred_df[new_column_name], color='green', linestyle='-')\n\n\n# Define the x range for the plots\nx_pre = np.linspace(x.iloc[-1], 100, 1000)\ny_pre = exponentialhyp_decay(x_pre, *popt)\n\n# Define the individual components of the function\ndef component1(x):\n    return popt[0] * np.exp(-popt[3] * (x - time_for_mutant))\ndef component2(x):\n    return popt[1] * np.exp(-popt[4] * (x - time_for_mutant))\ndef component3(x):\n    return popt[2] * abs(1 / (1 + popt[5] * (x - time_for_mutant)))\n\n# Plot the individual components of the function\nfig, (ax1) = plt.subplots()\nax1.plot(x, exponentialhyp_decay(x, *popt), 'r-', label='fit')\n#ax1.plot(x_pred, y_pred, 'r-', label='fit')\nax1.plot(pred_df['Time (s)'], pred_df[new_column_name], color='green', linestyle='-')\nax1.fill_between(x, component2(x)+component1(x),exponentialhyp_decay(x, *popt), where=(x >=0) & (x <= 100), alpha=0.5, color='red', label='A3')\nax1.plot(x, component2(x)+component1(x), 'orange', label='A1exp+A2exp')\nax1.fill_between(x, component1(x),component2(x)+component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='orange', label='A2')\nax1.plot(x, component1(x), 'yellow', label='hyperbolic')\nax1.fill_between(x, 0,component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='yellow', label='A1')\nax1.set_xlabel('Time (s)')\nax1.set_ylabel('Exponential Decay')\nplt.xscale(\"log\")\nax1.legend()\n\n# Add vertical lines for the half-life values\nax1.axvline(x=half_life3, linestyle='--', color='gray')\nax1.axvline(x=half_life2, linestyle='--', color='gray')\nax1.axvline(x=half_life1, linestyle='--', color='gray')\n\n# Add a legend to the plot\nax1.legend()\n\n\nplt.show()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:18:59.474477Z\",\"iopub.execute_input\":\"2023-09-08T19:18:59.474847Z\",\"iopub.status.idle\":\"2023-09-08T19:18:59.479885Z\",\"shell.execute_reply.started\":\"2023-09-08T19:18:59.474819Z\",\"shell.execute_reply\":\"2023-09-08T19:18:59.478556Z\"}}\ncolumn_names_norm = xiao_data_norm.columns\ncolumns_to_convert_norm = column_names_norm.tolist()\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:25:32.094992Z\",\"iopub.execute_input\":\"2023-09-08T19:25:32.095383Z\",\"iopub.status.idle\":\"2023-09-08T19:27:27.384527Z\",\"shell.execute_reply.started\":\"2023-09-08T19:25:32.095349Z\",\"shell.execute_reply\":\"2023-09-08T19:27:27.383655Z\"}}\n# Ask the user if they want to plot graphs for all columns\nuser_input = input(\"Do you want to plot all the exponential 3 decay graphs for all columns? (yes/no): \")\n\nif user_input.lower() == 'yes':\n    # Initialize a PrettyTable for the summary table\n    summary_table = PrettyTable()\n    summary_table.field_names = ['Column Name', 'Model 1', 'Model 2']\n\n    # Plot graphs for all columns\n    for column_name in columns_to_convert_norm:\n        if column_name not in ['new_column_name', \"Time (s)\"]:  # Skip the first column\n            # Get the data\n            time_for_column, index_for_column = get_time_and_index_for_mutant(column_name)\n            x = xiao_data_norm[\"Time (s)\"].iloc[index_for_column:]\n            y = xiao_data_norm[column_name].iloc[index_for_column:]\n\n            # Fit the exponential decay function to the data\n            popt, pcov = curve_fit(exponential_decay, x, y, p0=p0, maxfev=maxfev)\n\n            # Calculate R^2\n            residuals = y - exponential_decay(x, *popt)\n            ss_res = np.sum(residuals**2)\n            ss_tot = np.sum((y - np.mean(y))**2)\n            r_squared = 1 - (ss_res / ss_tot)\n\n            # Print the estimated parameters and R^2\n            print(\"A1= {:.3f}, A2= {:.3f}, A3= {:.3f}, K1= {:.3f}, K2= {:.3f}, K3= {:.3f}, R^2= {:.3f}\".format(*popt, r_squared))\n\n            from prettytable import PrettyTable\n\n            half_life1 = np.log2(2)/popt[3]\n            half_life2 = np.log2(2)/popt[4]\n            half_life3 = np.log2(2)/popt[5]\n            val_at_half_life1 = exponential_decay(half_life1, *popt)\n            val_at_half_life2 = exponential_decay(half_life2, *popt)\n            val_at_half_life3 = exponential_decay(half_life3, *popt)\n\n            table = PrettyTable()\n            table.field_names = [\"Half-life\", \"Exponential Value at Half-life\"]\n\n            table.add_row([f\"Half-life 3 ({half_life1:.6f}) associated to K1 and A1\", f\"{val_at_half_life1:.6f}\" + ('*' if val_at_half_life1 < 0 else '')])\n            table.add_row([f\"Half-life 2 ({half_life2:.6f}) associated to K2 and A2\", f\"{val_at_half_life2:.6f}\" + ('*' if val_at_half_life2 < 0 else '')])\n            table.add_row([f\"Half-life 1 ({half_life3:.6f}) associated to K3 and A3\", f\"{val_at_half_life3:.6f}\" + ('*' if val_at_half_life3 < 0 else '')])\n\n            \n\n            # Create a new time vector starting from the end of the actual data\n            x_pred = np.linspace(x.iloc[-1], 100, 1000)\n\n            # Predict the values for the new time vector\n            y_pred = exponential_decay(x_pred, *popt)\n\n            # Create a DataFrame with the predicted values\n            pred_df = pd.DataFrame({'Time (s)': x_pred, column_name: y_pred})\n\n            # Plot the data and the fitted curve\n            fig, ax = plt.subplots()\n            ax.plot(x, y, 'bo', label='data')\n            ax.plot(x, exponential_decay(x, *popt), 'r-', label='fit')\n            plt.xscale(\"log\")\n            # Set the y-axis limits to focus on the range where the half-life occurs\n            ax.set_ylim(bottom=-0.1, top=1.1)\n\n            # Add vertical lines for the half-life values\n            ax.axvline(x=half_life3, linestyle='--', color='gray')\n            ax.axvline(x=half_life2, linestyle='--', color='gray')\n            ax.axvline(x=half_life1, linestyle='--', color='gray')\n            # Plot the predicted values with a different color\n            ax.plot(pred_df['Time (s)'], pred_df[column_name], color='green', linestyle='-')\n\n            # Define the x range for the plots\n            x_pre = np.linspace(x.iloc[-1], 100, 1000)\n            y_pre = exponential_decay(x_pre, *popt)\n\n            # Define the individual components of the function\n            def component1(x):\n                return popt[0] * np.exp(-popt[3] * (x - time_for_mutant))\n\n            def component2(x):\n                return popt[1] * np.exp(-popt[4] * (x - time_for_mutant))\n\n            def component3(x):\n                return popt[2] * np.exp(-popt[5] * (x - time_for_mutant))\n\n\n            # Plot the individual components of the function\n            fig, (ax1) = plt.subplots()\n            ax1.plot(x, exponential_decay(x, *popt), 'r-', label='fit')\n            #ax1.plot(x_pred, y_pred, 'r-', label='fit')\n            ax1.plot(pred_df['Time (s)'], pred_df[column_name], color='green', linestyle='-')\n            ax1.fill_between(x, component2(x)+component1(x),exponential_decay(x, *popt), where=(x >=0) & (x <= 100), alpha=0.5, color='red', label='A3')\n            ax1.plot(x, component2(x)+component1(x), 'orange', label='A1exp+A2exp')\n            ax1.fill_between(x, component1(x),component2(x)+component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='orange', label='A2')\n            ax1.plot(x, component1(x), 'yellow', label='A1exp')\n            ax1.fill_between(x, 0,component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='yellow', label='A1')\n            ax1.set_xlabel('Time (s)')\n            ax1.set_ylabel('Exponential Decay')\n            plt.xscale(\"log\")\n            ax1.legend()\n\n            # Add vertical lines for the half-life values\n            ax1.axvline(x=half_life3, linestyle='--', color='gray')\n            ax1.axvline(x=half_life2, linestyle='--', color='gray')\n            ax1.axvline(x=half_life1, linestyle='--', color='gray')\n\n            # Add a legend to the plot\n            ax1.legend()\n\n            \n            # Print the table with column name\n            print(f\"Column Name: {column_name}\")\n            print(table)\n\n            # Show the plot with column name\n            plt.title(f\"Graph of exp3 for Column: {column_name}\")\n            plt.show()\nelse:\n    print(\"No additional graphs will be plotted.\")\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:20.697254Z\",\"iopub.status.idle\":\"2023-09-08T19:17:20.698008Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:20.697797Z\",\"shell.execute_reply\":\"2023-09-08T19:17:20.697821Z\"}}\n# Ask the user if they want to plot graphs for all columns\nuser_input = input(\"Do you want to plot all the hyperbolic exp 2 graphs for all columns? (yes/no): \")\n\nif user_input.lower() == 'yes':\n    # Initialize a PrettyTable for the summary table\n    summary_table = PrettyTable()\n    summary_table.field_names = ['Column Name', 'Model 1', 'Model 2']\n\n    # Plot graphs for all columns\n    for column_name in columns_to_convert_norm:\n        if column_name not in ['new_column_name', \"Time (s)\"]:  # Skip the first column\n            # Get the data\n            time_for_column, index_for_column = get_time_and_index_for_mutant(column_name)\n            x = xiao_data_norm[\"Time (s)\"].iloc[index_for_column:]\n            y = xiao_data_norm[column_name].iloc[index_for_column:]\n\n            # Fit the exponential decay function to the data\n            popt, pcov = curve_fit(exponentialhyp_decay, x, y, p0=p0, maxfev=maxfev)\n\n            # Calculate R^2\n            residuals = y - exponentialhyp_decay(x, *popt)\n            ss_res = np.sum(residuals**2)\n            ss_tot = np.sum((y - np.mean(y))**2)\n            r_squared = 1 - (ss_res / ss_tot)\n\n            # Print the estimated parameters and R^2\n            print(\"A1= {:.3f}, A2= {:.3f}, A3= {:.3f}, K1= {:.3f}, K2= {:.3f}, K3= {:.3f}, R^2= {:.3f}\".format(*popt, r_squared))\n\n            from prettytable import PrettyTable\n\n            half_life1 = np.log2(2)/popt[3]\n            half_life2 = np.log2(2)/popt[4]\n            half_life3 = 1/popt[5]\n            val_at_half_life1 = exponentialhyp_decay(half_life1, *popt)\n            val_at_half_life2 = exponentialhyp_decay(half_life2, *popt)\n            val_at_half_life3 = exponentialhyp_decay(half_life3, *popt)\n\n            table = PrettyTable()\n            table.field_names = [\"Half-life\", \"Exponential Value at Half-life\"]\n\n            table.add_row([f\"Half-life 3 ({half_life1:.6f}) associated to K1 and A1\", f\"{val_at_half_life1:.6f}\" + ('*' if val_at_half_life1 < 0 else '')])\n            table.add_row([f\"Half-life 2 ({half_life2:.6f}) associated to K2 and A2\", f\"{val_at_half_life2:.6f}\" + ('*' if val_at_half_life2 < 0 else '')])\n            table.add_row([f\"Half-life 1 ({half_life3:.6f}) associated to K3 and A3\", f\"{val_at_half_life3:.6f}\" + ('*' if val_at_half_life3 < 0 else '')])\n\n            \n\n            # Create a new time vector starting from the end of the actual data\n            x_pred = np.linspace(x.iloc[-1], 100, 1000)\n\n            # Predict the values for the new time vector\n            y_pred = exponentialhyp_decay(x_pred, *popt)\n\n            # Create a DataFrame with the predicted values\n            pred_df = pd.DataFrame({'Time (s)': x_pred, column_name: y_pred})\n\n            # Plot the data and the fitted curve\n            fig, ax = plt.subplots()\n            ax.plot(x, y, 'bo', label='data')\n            ax.plot(x, exponentialhyp_decay(x, *popt), 'r-', label='fit')\n            plt.xscale(\"log\")\n            # Set the y-axis limits to focus on the range where the half-life occurs\n            ax.set_ylim(bottom=-0.1, top=1.1)\n\n            # Add vertical lines for the half-life values\n            ax.axvline(x=half_life3, linestyle='--', color='gray')\n            ax.axvline(x=half_life2, linestyle='--', color='gray')\n            ax.axvline(x=half_life1, linestyle='--', color='gray')\n            # Plot the predicted values with a different color\n            ax.plot(pred_df['Time (s)'], pred_df[column_name], color='green', linestyle='-')\n\n            # Define the x range for the plots\n            x_pre = np.linspace(x.iloc[-1], 100, 1000)\n            y_pre = exponentialhyp_decay(x_pre, *popt)\n\n            # Define the individual components of the function\n            def component1(x):\n                return popt[0] * np.exp(-popt[3] * (x - time_for_mutant))\n\n            def component2(x):\n                return popt[1] * np.exp(-popt[4] * (x - time_for_mutant))\n\n            def component3(x):\n                return popt[2] * abs(1 / (1 + popt[5] * (x - time_for_mutant)))\n\n            # Plot the individual components of the function\n            fig, (ax1) = plt.subplots()\n            ax1.plot(x, exponentialhyp_decay(x, *popt), 'r-', label='fit')\n            #ax1.plot(x_pred, y_pred, 'r-', label='fit')\n            ax1.plot(pred_df['Time (s)'], pred_df[column_name], color='green', linestyle='-')\n            ax1.fill_between(x, component2(x)+component1(x),exponentialhyp_decay(x, *popt), where=(x >=0) & (x <= 100), alpha=0.5, color='red', label='A3')\n            ax1.plot(x, component2(x)+component1(x), 'orange', label='A1exp+A2exp')\n            ax1.fill_between(x, component1(x),component2(x)+component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='orange', label='A2')\n            ax1.plot(x, component1(x), 'yellow', label='hyperbolic')\n            ax1.fill_between(x, 0,component1(x), where=(x >=0) & (x <= 100), alpha=0.5, color='yellow', label='A1')\n            ax1.set_xlabel('Time (s)')\n            ax1.set_ylabel('Exponential Decay')\n            plt.xscale(\"log\")\n            ax1.legend()\n\n            # Add vertical lines for the half-life values\n            ax1.axvline(x=half_life3, linestyle='--', color='gray')\n            ax1.axvline(x=half_life2, linestyle='--', color='gray')\n            ax1.axvline(x=half_life1, linestyle='--', color='gray')\n\n            # Add a legend to the plot\n            ax1.legend()\n\n            \n            # Print the table with column name\n            print(f\"Column Name: {column_name}\")\n            print(table)\n\n            # Show the plot with column name\n            plt.title(f\"Graph of hyp+exp2 for Column: {column_name}\")\n            plt.show()\nelse:\n    print(\"No additional graphs will be plotted.\")\n\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:20.699363Z\",\"iopub.status.idle\":\"2023-09-08T19:17:20.700282Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:20.700057Z\",\"shell.execute_reply\":\"2023-09-08T19:17:20.700075Z\"}}\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.polynomial import legendre\n\n# Ask the user for the number of Legendre polynomials to plot\nnum_polynomials = int(input(\"Enter the number of Legendre polynomials to plot: \"))\n\n# Define the range for the dummy variable t\nt_min = -1\nt_max = 1\n\n# Create a new DataFrame with modified \"Time (s)\" column\nnew_df = pd.DataFrame()\nnew_df[\"Time (s)\"] = xiao_data_norm[\"Time (s)\"].iloc[index_for_mutant:]  / 25 - 1\nnew_df[new_column_name] = xiao_data_norm[new_column_name].iloc[index_for_mutant:] \n\n# Plot the original Legendre polynomials with dummy variable t\nt = np.linspace(t_min, t_max, 100)\n\nfig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n# Plot the Legendre polynomials\naxs[0].set_xlabel('t')\naxs[0].set_ylabel('Legendre Polynomial')\naxs[0].set_title('Legendre Polynomials')\nfor i in range(num_polynomials):\n    legendre_poly_t = legendre.legval(t, [1 if j == i else 0 for j in range(num_polynomials)])\n    axs[0].plot(t, legendre_poly_t, label='m{}'.format(i+1))\naxs[0].legend()\n\n# Plot the renormalized data along with the Legendre polynomials\naxs[1].set_xlabel(\"t'\")\naxs[1].set_ylabel(new_column_name)\naxs[1].set_title(\"Renormalized Data\")\naxs[1].scatter(new_df[\"Time (s)\"], new_df[new_column_name], color='red', label='Renormalized Data')\naxs[1].legend()\n\nplt.tight_layout()\nplt.show()\nprint(new_df)\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:20.701358Z\",\"iopub.status.idle\":\"2023-09-08T19:17:20.701650Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:20.701509Z\",\"shell.execute_reply\":\"2023-09-08T19:17:20.701524Z\"}}\nfrom scipy.optimize import least_squares as mini\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom numpy.polynomial import Legendre as L\n\n# Get the data\nx = xiao_data_norm[\"Time (s)\"].iloc[index_for_mutant:]\ny = xiao_data_norm[new_column_name].iloc[index_for_mutant:]\n\ndef myfitfun(x, y, order):\n    p = L.fit(x, y, order)\n    return p(x)\n\ndegrees = [2, 4, 8,num_polynomials]\nplt.scatter(x, y, c='blue', lw=4, label='Data')\n\nfor deg in degrees:\n    fitted_data = myfitfun(x, y, deg)\n    plt.plot(x, fitted_data, label=\"Degree = %i\" % deg)\n\nplt.xlabel(\"Time (s)\")\nplt.ylabel(new_column_name)\nplt.legend()\nplt.show()\n# Create a dictionary to store the results\nresults = {\n    'Degree': [],\n    'R-squared': [],\n    'Coefficients': []\n}\nfor deg in degrees:\n    fitted_data = myfitfun(x, y, deg)\n    \n    # Calculate R-squared\n    residuals = y - fitted_data\n    ss_res = np.sum(residuals**2)\n    ss_tot = np.sum((y - np.mean(y))**2)\n    r_squared = 1 - (ss_res / ss_tot)\n    \n    # Get the Legendre polynomial coefficients\n    coeffs = L.fit(x, y, deg).coef\n    \n    # Store the results in the dictionary\n    results['Degree'].append(deg)\n    results['R-squared'].append(r_squared)\n    results['Coefficients'].append(coeffs)\n\n# Create a DataFrame from the results dictionary\ndf = pd.DataFrame(results)\n\n# Display the table\nprint(df)\n#print(df['Coefficients'])\n\n# %% [code] {\"jupyter\":{\"outputs_hidden\":false},\"execution\":{\"iopub.status.busy\":\"2023-09-08T19:17:20.702440Z\",\"iopub.status.idle\":\"2023-09-08T19:17:20.702751Z\",\"shell.execute_reply.started\":\"2023-09-08T19:17:20.702604Z\",\"shell.execute_reply\":\"2023-09-08T19:17:20.702622Z\"}}\n\neqdeg=3 # how many exponentials\n# Calculate the initial list of coefficients\ncoefficients = L.fit(x, y, num_polynomials).coef\n\nnew_list = [coefficients]  # List to store the coefficients\n\n# Perform the recursive calculations\nfor i in range(1, eqdeg):\n    prev_coeffs = new_list[-1]  # Get the previous coefficients\n    new_coeffs = [prev_coeffs[j - 1]/(2*i-1) - prev_coeffs[j + 1]/(2*i+3) for j in range(1, len(prev_coeffs) - 1)]\n    new_list.append(new_coeffs)\n\n# Print the new list of coefficients\nfor coeffs in new_list:\n    print(coeffs)","metadata":{"_uuid":"77b47c94-5b86-496b-85ad-4d2aad995233","_cell_guid":"93f1cf8e-c8d3-4095-892d-980ec3474752","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}